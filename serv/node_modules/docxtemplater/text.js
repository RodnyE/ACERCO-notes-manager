"use strict";

// Add error handling for missing dependencies
const checkDependencies = () => {
  const missingDependencies = [
    Lexer,
    Parser,
    DocUtils,
    createScope,
    utf8decode,
    renderModule,
    loopModule,
    expandPairTrait,
    XmlTemplater,
  ].filter(d => !d);

  if (missingDependencies.length) {
    throw new Error(`Missing dependencies: ${missingDependencies.join(', ')}`);
  }
};

checkDependencies();

const TxtTemplater = (text, options = {}) => {
  const xmlt = new XmlTemplater(text, {
    modules: [],
  });

  xmlt.fileTypeConfig = options.fileTypeConfig = {
    droppedTagsInsidePlaceholder: [],
    expandTags: [],
  };

  Object.keys(DocUtils.defaults).forEach(key => {
    const defaultValue = DocUtils.defaults[key];
    xmlt[key] = options[key] = options[key] != null ? options[key] : defaultValue;
  });

  xmlt.modules = [loopModule(), expandPairTrait(), renderModule()];

  xmlt.modules.forEach(module => {
    module.optionsTransformer(options, {
      fileTypeConfig: xmlt.fileTypeConfig,
      options: xmlt,
    });
  });

  xmlt.allErrors = [];

  // Fake XML parsing : surround the text with an empty tag of type text: true
  xmlt.xmllexed = [
    {
      type: "tag",
      position: "start",
      value: "",
      text: true,
    },
    {
      type: "content",
      value: text,
    },
    {
      type: "tag",
      position: "end",
      value: "",
    },
  ];

  xmlt.setModules({
    inspect: {
      xmllexed: xmlt.xmllexed,
    },
  });

  const { lexed, errors: lexerErrors } = Lexer.parse(xmlt.xmllexed, xmlt.delimiters);

  xmlt.allErrors = xmlt.allErrors.concat(lexerErrors);

  xmlt.lexed = lexed;

  xmlt.setModules({
    inspect: {
      lexed: xmlt.lexed,
    },
  });

  Parser.preparse(xmlt.lexed, xmlt.modules, xmlt.getOptions());

  xmlt.parse();

  const render = tags => {
    xmlt.scopeManager = createScope({
      tags: tags,
      parser: xmlt.parser,
    });

    return utf8decode(xmlt.render().content);
  };

  return {
    render,
  };
};

// Add module.exports for compatibility with CommonJS
module.exports = TxtTemplater;

// Add default exports for better compatibility with modern JavaScript
export default TxtTemplater;
