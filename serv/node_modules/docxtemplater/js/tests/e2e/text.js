"use strict";

const mocha = require("mocha");
const expect = require("chai").expect;
const sinon = require("sinon");

const expressionParser = require("../../expressions.js");
const TxtTemplater = require("../../text.js");

const utils = require("../utils.js");
const { expect: expectStub } = utils;
sinon.stub(utils, "expect").callsFake(expectStub);

const doc = new TxtTemplater("Hello {user}, how are you ?");

describe.only("Text templating", function () {
  afterEach(() => {
    utils.expect.restore();
  });

  it("should be possible to template text files", function (done) {
    utils.expect(doc.render({ user: "John" })).to.deep.equal(
      "Hello John, how are you ?".toString()
    );
    done();
  });

  it("should be possible to template text files with expressionParser", function (done) {
    const doc = new TxtTemplater("Hello {user + age}, how are you ?", {
      parser: expressionParser,
    });

    utils.expect(doc.render({ user: "John ", age: 12 })).to.deep.equal(
      "Hello John 12, how are you ?".toString()
    );
    done();
  });

  it("should be possible to use loops", function (done) {
    const doc = new TxtTemplater("Hello {#users}{name},{/users} how are you ?", {
      parser: expressionParser,
    });

    utils.expect(
      doc.render({
        users: [{ name: "John" }, { name: "Baz" }],
      })
    ).to.deep.equal("Hello John,Baz, how are you ?".toString());
    done();
  });
});


npm install mocha chai sinon


const expect = require("chai").expect;

module.exports = {
  expect,
};
