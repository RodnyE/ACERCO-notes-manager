{
  "name": "my-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "chai-as-promised": "^7.1.1",
    "chai-string": "^1.4.5",
    "lodash": "^4.17.21",
    "mocha": "^9.1.3"
  }
}


{
  "extension": ["ts"],
  "spec": ["test/**/*.test.ts"],
  "require": ["ts-node/register"],
  "timeout": 10000
}


import { expect } from "chai";
import chaiAsPromised from "chai-as-promised";
import chaiString from "chai-string";
import _ from "lodash";
import { createDoc, createDocV4 } from "../src/utils";
import { resolveSoon } from "../src/utils";
import { cleanRecursive } from "../src/utils";
import fixDocPrCorruption from "../src/fix-doc-pr-corruption";

expect.use(chaiAsPromised);
expect.use(chaiString);

describe("Resolver", () => {
  let doc: any;

  beforeEach(async () => {
    doc = createDoc("office365.docx");
    doc.setOptions({
      paragraphLoop: true,
    });
    doc.compile();
  });

  afterEach(async () => {
    await doc.cleanup();
  });

  it.only("should render the document correctly in async mode", async () => {
    await doc.resolveData({
      test: resolveSoon("Value"),
      test2: "Value2",
    });

    doc.render();
    expect(doc.getFullText()).to.equal("Value Value2");
    expect(doc).to.be.equalDeeply({
      doc: doc,
      expectedName: "expected-office365.docx",
    });
  });

  it.only("should resolve loops", async () => {
    doc = createDoc("multi-loop.docx");
    doc.setOptions({
      paragraphLoop: true,
    });
    doc.compile();

    await doc.resolveData({
      companies: resolveSoon([
        {
          name: "Acme",
          users: resolveSoon(
            [
              {
                name: resolveSoon("John", 25),
              },
              resolveSoon({
                name: "James",
              }),
            ],
            5
          ),
        },
        resolveSoon({
          name: resolveSoon("Emca"),
          users: resolveSoon(
            [
              {
                name: "Mary",
              },
              {
                name: "Liz",
              },
            ],
            5
          ),
        }),
        20
      ]),
      test2: "Value2",
    });

    doc.render();
    expect(doc).to.be.equalDeeply({
      doc: doc,
      expectedName: "expected-multi-loop.docx",
    });
  });

  it("should work with fix doc pr corruption", async () => {
    doc = createDocV4("loop-image.docx", {
      modules: [fixDocPrCorruption],
    });
    doc.setOptions({
      paragraphLoop: true,
    });
    doc.compile();

    await doc.resolveData({
      loop: resolveSoon([1, 2, 3, 4]),
    });

    doc.render();
    expect(doc).to.be.equalDeeply({
      doc: doc,
      expectedName: "expected-loop-images.docx",
    });
  });
});

interface IExpectedDoc {
  doc: any;
  expectedName: string;
}

const shouldBeSame = async (data: IExpectedDoc) => {
  const { doc, expectedName } = data;
  const expectedDoc = await createDoc(expectedName);
  const actualText = doc.getFullText();
  const expectedText = expectedDoc.getFullText();
  expect(actualText).to.equal(expectedText);
};

const expectDeep = (data: any) => {
  return expect(data).to.be.deep;
};

const expectEqualDeeply = (data: IExpectedDoc) => {
  return expect(doc).to.be.equalDeeply(data);
};
