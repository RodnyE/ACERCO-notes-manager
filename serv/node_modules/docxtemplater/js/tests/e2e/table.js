"use strict";

const fs = require("fs");
const path = require("path");
const {
  createDoc,
  createDocV4,
  shouldBeSame,
  expect
} = require("../utils.js");

describe("Table", function() {
  let doc;

  beforeEach(function() {
    doc = createDoc("temp.docx");
  });

  afterEach(function() {
    if (fs.existsSync(doc.filePath)) {
      fs.unlinkSync(doc.filePath);
    }
  });

  it("should work with selfclosing tag inside table with paragraphLoop", async function() {
    const tags = {
      a: [{
          b: {
            c: "Foo",
            d: "Hello "
          }
        },
        {
          b: {
            c: "Foo",
            d: "Hello "
          }
        }
      ]
    };
    await doc.renderV4("loop-valid.docx", {
      paragraphLoop: true
    }, tags);
    shouldBeSame({
      doc: doc,
      expectedName: "expected-loop-valid.docx"
    });
  });

  it("should work with tables", async function() {
    const tags = {
      clients: [{
          first_name: "John",
          last_name: "Doe",
          phone: "+33647874513"
        },
        {
          first_name: "Jane",
          last_name: "Doe",
          phone: "+33454540124"
        },
        {
          first_name: "Phil",
          last_name: "Kiel",
          phone: "+44578451245"
        },
        {
          first_name: "Dave",
          last_name: "Sto",
          phone: "+44548787984"
        }
      ]
    };
    doc.setData(tags);
    await doc.render();
    const expectedText = "JohnDoe+33647874513JaneDoe+33454540124PhilKiel+44578451245DaveSto+44548787984";
    expect(doc.getFullText()).to.deep.equal(expectedText);
    shouldBeSame({
      doc: doc,
      expectedName: "expected-tag-intelligent-loop-table.docx"
    });
  });

  // ... other test cases

});
