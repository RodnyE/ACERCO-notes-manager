const fs = require('fs-extra');
const path = require('path');
const assert = require('assert');
const {
  createDoc,
  createDocV4,
  shouldBeSame,
} = require('../index');

const rawXMLPath = path.join(__dirname, '../data/raw-xml-pptx.js');
const rawXMLValue = fs.readJsonSync(rawXMLPath).default;

describe.only('Pptx generation', function () {
  let doc;

  beforeEach(function () {
    doc = createDoc('test-pptx.pptx');
  });

  afterEach(function () {
    doc = null;
  });

  it('should work with title', async function () {
    const con = doc.getZip().files['docProps/app.xml'].asText();
    assert.notStrictEqual(con.includes('Edgar'), true);

    await doc.setData({
      name: 'Edgar'
    }).render();

    const con2 = doc.getZip().files['docProps/app.xml'].asText();
    assert.strictEqual(con2.includes('Edgar'), true);
  });

  it('should work with simple pptx', async function () {
    await doc.render({
      name: 'Edgar'
    });

    assert.strictEqual(doc.getFullText(), 'Hello Edgar');
  });

  it('should work with table pptx', async function () {
    await doc.setData({
      users: [{
          msg: 'hello',
          name: 'mary'
        },
        {
          msg: 'hello',
          name: 'john'
        }
      ]
    }).render();

    shouldBeSame({
      doc,
      expectedName: 'expected-table-example.pptx'
    });
  });

  it('should work with loop table', async function () {
    const docV4 = createDocV4('loop-table.pptx');

    try {
      await docV4.renderAsync({
        products: [{
            name: 'Acme',
            price: 10
          },
          {
            name: 'Ecma',
            price: 20
          }
        ]
      });

      assert.deepStrictEqual(docV4.scopeManagers['ppt/slides/slide1.xml'].resolved, [{
        tag: 'products',
        lIndex: 58,
        value: [
          [{
              tag: 'name',
              lIndex: 61,
              value: 'Acme'
            },
            {
              tag: 'price',
              lIndex: 79,
              value: 10
            }
          ],
          [{
            tag: 'name',
            lIndex: 61,
            value: 'Ecma'
          }, {
            tag: 'price',
            lIndex: 79,
            value: 20
          }]
        ]
      }]);

      shouldBeSame({
        doc: docV4,
        expectedName: 'expected-loop-table.pptx'
      });
    } catch (err) {
      console.error(err);
      assert.ok(false);
    }
  });

  it('should work with loop pptx', async function () {
    await doc.setData({
      users: [{
          name: 'Doe'
        },
        {
          name: 'John'
        }
      ]
    }).render();

    assert.strictEqual(doc.getFullText(), ' Doe  John ');
    shouldBeSame({
      doc: doc,
      expectedName: 'expected-loop-example.pptx'
    });
  });

  it('should work with simple raw pptx', async function () {
    doc.setOptions({
      parser: function (t) {
        const tag = t;
        return {
          get: function (s, m) {
            const scope = s;
            const meta = m.meta;
            assert.ok(scope[tag]);
            calls++;
            return scope[tag];
          }
        };
      }
    });

    let calls = 0;

    await doc.setData({
      raw: rawXMLValue
    }).render();

    assert.strictEqual(calls, 1);
    assert.ok(doc.getFullText(), 'Hello World');
    shouldBeSame({
      doc: doc,
      expectedName: 'expected-raw-xml-example.pptx'
    });
  });

  it('should work with simple raw pptx async', async function () {
    doc.setOptions({
      parser: function (t) {
        const tag = t;
        return {
          get: function (s, m) {
            const scope = s;
            const meta = m.meta;
            assert.ok(scope[tag]);
            calls++;
            return scope[tag];
          }
        };
      }
    });

    let calls = 0;

    await doc.compile();

    try {
      await doc.resolveData({
        raw: Promise.resolve(rawXMLValue)
      });

      await doc.render();

      assert.strictEqual(calls, 1);
      assert.ok(doc.getFullText(), 'Hello World');
      shouldBeSame({
        doc: doc,
        expectedName: 'expected-raw-xml-example.pptx'
      });
    } catch (err) {
      console.error(err);
      assert.ok(false);
    }
  });
});


{
  "name": "pptx-generation",
  "version": "1.0.0",
  "description": "A library for generating PowerPoint presentations",
  "main": "index.js",
  "scripts": {
    "test": "mocha test/**/*.test.js --exit"
  },
  "keywords": [
    "pptx",
    "presentation",
    "generator"
  ],
  "author": "Your Name",
  "license": "MIT",
  "devDependencies": {
    "chai": "^4.3.4",
    "fs-extra": "^10.0.0",
    "mocha": "^9.1.3"
  }
}


{
  "extension": ["ts"],
  "spec": "test/**/*.test.js",
  "require": "tsconfig.json"
}
