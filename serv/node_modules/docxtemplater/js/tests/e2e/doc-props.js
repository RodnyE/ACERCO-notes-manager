"use strict";

const { createDoc, createDocV4, shouldBeSame } = require("../utils.js");
const { expect } = require("chai");

describe("Docx document properties", function () {
  let doc;

  beforeEach(function () {
    doc = createDoc("tag-docprops.docx");
  });

  afterEach(function () {
    if (doc) {
      doc.close();
    }
  });

  it("should change values in doc-props", async function () {
    const tags = {
      first_name: "Hipp",
      last_name: "Edgar",
      phone: "0652455478",
      description: "New Website",
    };

    doc.setData(tags);
    expect(doc.getFullText("docProps/app.xml")).to.equal("TitleName: " + tags.first_name);
    await doc.render();
    expect(doc.getFullText()).to.equal(tags.last_name + " " + tags.first_name);
    expect(doc.getFullText("word/header1.xml")).to.equal(
      tags.last_name +
        " " +
        tags.first_name +
        tags.phone +
        tags.description
    );
    expect(doc.getFullText("word/footer1.xml")).to.equal(tags.last_name + tags.first_name + tags.phone);
    expect(doc.getFullText("docProps/app.xml")).to.equal("TitleName: " + tags.first_name);

    await shouldBeSame({ doc, expectedName: "expected-tag-docprops.docx" });
  });

  it("should change custom values inside '<vt:lpwstr>' in file docProps/custom.xml", async function () {
    doc = createDoc("tag-docprops-in-doc.docx");

    const tags = {
      first_name: "Hipp",
      email: "john@acme.com",
      last_name: "Edgar",
      phone: "0652455478",
      description: "New Website",
    };

    doc.render(tags);
    await shouldBeSame({ doc, expectedName: "expected-tag-docprops-in-doc.docx" });
  });

  it("should be possible to ignore files in docProps/core.xml", async function () {
    const avoidRenderingCoreXMLModule = {
      name: "avoidRenderingCoreXMLModule",
      getFileType: function (doc) {
        doc.targets = doc.targets.filter((file) => {
          if (file === "docProps/core.xml" || file === "docProps/app.xml") {
            return false;
          }
          return true;
        });
      },
    };

    doc = createDocV4("core-xml-missing-close-tag.docx", {
      modules: [avoidRenderingCoreXMLModule],
    });

    const tags = {
      first_name: "Hipp",
      last_name: "Edgar",
      phone: "0652455478",
      description: "New Website",
    };

    doc.render(tags);
    await shouldBeSame({ doc, expectedName: "expected-core-xml.docx" });
  });
});
