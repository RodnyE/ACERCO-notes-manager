"use strict";

const path = require("path");
const chai = require("chai");
const PizZip = require("pizzip");
const fs = require("fs");
const _ = require("lodash");
const diff = require("diff");
const xmlPrettify = require("./xml-prettify.js");
const errorLogger = require("../error-logger.js");
const Docxtemplater = require("../docxtemplater.js");
const first = require("../utils.js").first;

const expect = chai.expect;
const uniq = _.uniq;
const cloneDeep = _.cloneDeep;

let examplesDirectory;
let documentCache = {};
let imageData = {};

function unifiedDiff(actual, expected) {
  //...
}

function isNode14() {
  //...
}

function walk(dir) {
  //...
}

function createXmlTemplaterDocxNoRender(content, options) {
  //...
}

function createXmlTemplaterDocx(content, options) {
  //...
}

function writeFile(expectedName, zip) {
  //...
}

function unlinkFile(expectedName) {
  //...
}

function getText(file) {
  //...
}

function isBinaryFile(file1, file2) {
  //...
}

function isZip(text) {
  //...
}

async function zipCompare(zip, expectedZip, expectedName) {
  //...
}

function shouldBeSame(doc, expectedName) {
  //...
}

function checkLength(e, expectedError, propertyPath) {
  //...
}

function cleanRecursive(arr) {
  //...
}

function cleanError(e, expectedError) {
  //...
}

function wrapMultiError(error) {
  //...
}

function jsonifyError(e) {
  //...
}

function errorVerifier(e, type, expectedError) {
  //...
}

async function expectToThrowAsync(fn, type, expectedError) {
  //...
}

function expectToThrow(fn, type, expectedError) {
  //...
}

function load(name, content, cache) {
  //...
}

function loadDocument(name, content) {
  return load(name, content, documentCache);
}

function cacheDocument(name, content) {
  //...
}

function loadImage(name, content) {
  imageData[name] = content;
}

async function loadFile(name, callback) {
  try {
    const buffer = fs.readFileSync(path.join(examplesDirectory, name), "binary");
    return callback(null, name, buffer);
  } catch (e) {
    return PizZipUtils.getBinaryContent("../examples/" + name, callback);
  }
}

function unhandledRejectionHandler(reason) {
  //...
}

let startFunction;

function setStartFunction(sf) {
  //...
}

function endLoadFile(change) {
  //...
}

function endsWith(str, suffix) {
  //...
}

function endsWithOne(str, suffixes) {
  //...
}

function startsWith(str, prefix) {
  //...
}

function start() {
  //...
}

function setExamplesDirectory(ed) {
  //...
}

function removeSpaces(text) {
  //...
}

const docxContentTypeContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\n  <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n  <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n  <Override PartName=\"/word/document.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\"/>\n</Types>";

function makeDocx(content) {
  //...
}

function makeDocxV4(content, options) {
  //...
}

function makePptx(name, content) {
  //...
}

function makePptxV4(content, options) {
  //...
}

function createDoc(name) {
  //...
}

function createDocV4(name, options) {
  //...
}

function getZip(name) {
  //...
}

function getLoadedContent(name) {
  //...
}

function getContent(doc) {
  //...
}

async function resolveSoon(data, time) {
  //...
}

async function rejectSoon(data, time) {
  //...
}

function getParameterByName(name) {
  //...
}

function browserMatches(regex) {
  //...
}

function getLength(obj) {
  //...
}

function captureLogs() {
  //...
}

module.exports = {
  chai,
  cleanError,
  cleanRecursive,
  createDoc,
  getLoadedContent,
  createXmlTemplaterDocx,
  createXmlTemplaterDocxNoRender,
  expect,
  expectToThrow,
  expectToThrowAsync,
  getContent,
  imageData,
  loadDocument,
  loadFile,
  loadImage,
  makeDocx,
  makeDocxV4,
  makePptx,
  makePptxV4,
  removeSpaces,
  setExamplesDirectory,
  setStartFunction,
  shouldBeSame,
  resolveSoon,
  rejectSoon,
  start,
  wrapMultiError,
  isNode14,
  createDocV4,
  getZip,
  getParameterByName,
  browserMatches,
  errorVerifier,
  getLength,
  captureLogs
};
