"use strict";

const util = require("util");

// The error thrown here contains additional information when logged with JSON.stringify (it contains a properties object containing all suberrors).
Error.prototype.replaceErrors = function (key, value) {
  if (value instanceof Error) {
    return Object.getOwnPropertyNames(value).concat("stack").reduce(function (error, key) {
      error[key] = value[key];
      if (key === "stack") {
        // This is used because in Firefox, stack is not an own property
        error[key] = util.format(value[key]);
      }
      return error;
    }, {});
  }
  return value;
};

function logger(error, logging = "text") {
  if (typeof error !== "object" || error === null) {
    throw new Error("error must be an object");
  }

  if (logging !== "text" && logging !== "json") {
    throw new Error("logging must be either 'text' or 'json'");
  }

  // eslint-disable-next-line no-console
  console.log(JSON.stringify({
    error: error
  }, error.replaceErrors.bind(error), logging === "json" ? 2 : null));

  if (error.properties && error.properties.errors instanceof Array) {
    var errorMessages = error.properties.errors.map(function (error) {
      return error.properties.explanation;
    }).join("\n");

    // eslint-disable-next-line no-console
    console.log("errorMessages", errorMessages);
    // errorMessages is a humanly readable message looking like this :
    // 'The tag beginning with "foobar" is unopened'
  }
}

module.exports = logger;
