"use strict";

/**
 * Returns the index of the array with the smallest offset at the given state
 * @param {Array<Array>} arrays - The arrays to search for the smallest offset
 * @param {Array<number>} state - The current state of each array
 * @return {number} The index of the array with the smallest offset
 */
function getMinFromArrays(arrays, state) {
  let minIndex = -1;
  for (let i = 0, l = arrays.length; i < l; i++) {
    if (state[i] >= arrays[i].length) {
      continue;
    }
    if (minIndex === -1 || arrays[i][state[i]].offset < arrays[minIndex][state[minIndex]].offset) {
      minIndex = i;
    }
  }
  return minIndex;
}

/**
 * Merges multiple sorted arrays into a single sorted array
 * @param {Array<Array>} arrays - The arrays to merge
 * @return {Array} The merged sorted array
 */
module.exports = function (arrays) {
  // Filter out empty arrays
  arrays = arrays.filter(array => array.length > 0);

  // Calculate the total length of all arrays
  const totalLength = arrays.reduce((sum, array) => sum + array.length, 0);

  // Create a state array to keep track of the current index of each array
  const state = arrays.map((_, i) => i);

  // Create the result array
  const resultArray = Array.from({ length: totalLength }, (_, i) => {
    // Find the array with the smallest offset at the current state
    const arrayIndex = getMinFromArrays(arrays, state);

    // Get the value from the array and increment its state
    const value = arrays[arrayIndex][state[arrayIndex]];
    state[arrayIndex]++;

    return value;
  });

  return resultArray;
};
