"use strict";

// Import XTInternalError class from errors.js module
const { XTInternalError } = require("./errors.js");

// Define a no-op function
const emptyFun = () => {};

// Define an identity function
const identity = i => i;

// Export a function that wraps a module with default functions if necessary
module.exports = function (module) {
  // Define the default functions object
  const defaults = {
    set: emptyFun,
    matchers: () => [],
    parse: emptyFun,
    render: emptyFun,
    getTraits: emptyFun,
    getFileType: emptyFun,
    nullGetter: emptyFun,
    optionsTransformer: identity,
    postrender: identity,
    errorsTransformer: identity,
    getRenderedMap: identity,
    preparse: identity,
    postparse: identity,
    on: emptyFun,
    resolve: emptyFun
  };

  // Check if all default functions are missing in the module
  if (Object.keys(defaults).every(key => !module[key])) {
    // Throw an error if all default functions are missing
    const err = new XTInternalError(`This module cannot be wrapped, because it doesn't define any of the necessary functions: ${Object.keys(defaults).join(", ")}.`);
    err.properties = {
      id: "module_cannot_be_wrapped",
      explanation: `This module cannot be wrapped, because it doesn't define any of the necessary functions: ${Object.keys(defaults).join(", ")}.`
    };
    throw err;
  }

  // Merge the default functions object with the module object
  Object.assign(module, defaults);

  // Use destructuring to simplify the following lines
  ({
    set: module.set,
    matchers: module.matchers,
    parse: module.parse,
    render: module.render,
    getTraits: module.getTraits,
    getFileType: module.getFileType,
    nullGetter: module.nullGetter,
    optionsTransformer: module.optionsTransformer,
    postrender: module.postrender,
    errorsTransformer: module.errorsTransformer,
    getRenderedMap: module.getRenderedMap,
    preparse: module.preparse,
    postparse: module.postparse,
    on: module.on,
    resolve: module.resolve
  } = module);

  // Return the wrapped module
  return module;
};
