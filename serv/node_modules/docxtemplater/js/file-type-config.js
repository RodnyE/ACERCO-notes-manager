"use strict";

const loopModule = require("./modules/loop.js");
const spacePreserveModule = require("./modules/space-preserve.js");
const rawXmlModule = require("./modules/rawxml.js");
const expandPairTrait = require("./modules/expand-pair-trait.js");
const render = require("./modules/render.js");

// Common properties for DocXFileTypeConfig and PptXFileTypeConfig
const FileTypeConfig = () => ({
  getTemplatedFiles() {
    return [];
  },
  textPath(doc) {
    return doc.textTarget;
  },
  tagsXmlTextArray: [
    "Company",
    "HyperlinkBase",
    "Manager",
    "cp:category",
    "cp:keywords",
    "dc:creator",
    "dc:description",
    "dc:subject",
    "dc:title",
    "cp:contentStatus",
    "w:t",
    "m:t",
    "vt:lpstr",
    "vt:lpwstr",
  ],
  tagsXmlLexedArray: [
    "w:proofState",
    "w:tc",
    "w:tr",
    "w:tbl",
    "w:body",
    "w:document",
    "w:p",
    "w:r",
    "w:br",
    "w:rPr",
    "w:pPr",
    "w:spacing",
    "w:sdtContent",
    "w:drawing",
    "w:sectPr",
    "w:type",
    "w:headerReference",
    "w:footerReference",
    "w:bookmarkStart",
    "w:bookmarkEnd",
    "w:commentRangeStart",
    "w:commentRangeEnd",
    "w:commentReference",
  ],
  droppedTagsInsidePlaceholder: ["w:p", "w:br", "w:bookmarkStart", "w:bookmarkEnd"],
  expandTags: [
    {
      contains: "w:tc",
      expand: "w:tr",
    },
  ],
  onParagraphLoop: [
    {
      contains: "w:p",
      expand: "w:p",
      onlyTextInTag: true,
    },
  ],
  baseModules: [loopModule, spacePreserveModule, expandPairTrait, rawXmlModule, render],
});

const DocXFileTypeConfig = () => ({
  ...FileTypeConfig(),
  tagRawXml(tag) {
    return `w:${tag}`;
  },
  tagShouldContain(tag) {
    if (tag === "w:tbl") {
      return {
        shouldContain: ["w:tr"],
        drop: true,
      };
    }
    if (tag === "w:tc") {
      return {
        shouldContain: ["w:p"],
        value: "<w:p></w:p>",
      };
    }
    if (tag === "w:sdtContent") {
      return {
        shouldContain: ["w:p", "w:r", "w:commentRangeStart"],
        value: "<w:p></w:p>",
      };
    }
  },
});

const PptXFileTypeConfig = () => ({
  ...FileTypeConfig(),
  tagRawXml(tag) {
    return `p:${tag}`;
  },
  tagShouldContain(tag) {
    if (tag === "a:tbl") {
      return {
        shouldContain: ["a:tr"],
        drop: true,
      };
    }
    if (tag === "p:txBody") {
      return {
        shouldContain: ["a:p"],
        value: "<a:p></a:p>",
      };
    }
  },
});

module.exports = {
  docx: DocXFileTypeConfig,
  pptx: PptXFileTypeConfig,
};
