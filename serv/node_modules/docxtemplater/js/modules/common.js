"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
    ? function (obj) {
        return typeof obj;
      }
    : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype
          ? "symbol"
          : typeof obj;
      },
    _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _classPrivateFieldInitSpec(obj, privateMap, value) {
  if (privateMap.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  privateMap.set(obj, value);
}

function _classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}

function _classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}

function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

var wrapper = require("../module-wrapper.js");
var filetypes = require("../filetypes.js");

var commonContentTypes = [
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml",
  "application/vnd.openxmlformats-package.core-properties+xml",
  "application/vnd.openxmlformats-officedocument.extended-properties+xml",
  "application/vnd.openxmlformats-officedocument.custom-properties+xml",
];

var Common = /*#__PURE__*/ (function () {
  function Common() {
    _classCallCheck(this, Common);

    _classPrivateFieldInitSpec(this, _name, {
      writable: true,
      value: "Common",
    });

    this.invertedContentTypes = undefined;
    this.relsTypes = {};
    this.textTarget = undefined;
    this.targets = [];
  }

  _createClass(Common, [
    {
      key: "getFileType",
      value: function getFileType(doc) {
        if (this.invertedContentTypes === undefined) {
          throw new Error("invertedContentTypes is not defined");
        }

        if (!this.invertedContentTypes) {
          return;
        }

        for (var _i = 0, _commonContentTypesLen = commonContentTypes.length; _i < _commonContentTypesLen; _i++) {
          var ct = commonContentTypes[_i];
          if (this.invertedContentTypes[ct]) {
            this.targets.push.apply(this.targets, this.invertedContentTypes[ct]);
          }
        }

        var fileTypeCandidates = this.getFileTypeCandidates(doc);

        if (fileTypeCandidates.length > 0) {
          return fileTypeCandidates[0];
        }

        return undefined;
      },
    },
    {
      key: "getFileTypeCandidates",
      value: function getFileTypeCandidates(doc) {
        var keys = ["docx", "pptx"];
        var fileTypeCandidates = [];

        for (var _keyIndex = 0, keys_1 = keys; _keyIndex < keys_1.length; _keyIndex++) {
          var key = keys_1[_keyIndex];
          var contentTypes = filetypes[key];

          for (var _contentTypesIndex = 0, contentTypes_1 = contentTypes; _contentTypesIndex < contentTypes_1.length; _contentTypesIndex++) {
            var contentType = contentTypes_1[_contentTypesIndex];
            if (this.invertedContentTypes[contentType]) {
              var targets = this.invertedContentTypes[contentType];

              for (var _targetsIndex = 0, targets_1 = targets; _targetsIndex < targets_1.length; _targetsIndex++) {
                var target = targets_1[_targetsIndex];

                if (
                  this.relsTypes[target] &&
                  [
                    "http://purl.oclc.org/ooxml/officeDocument/relationships/officeDocument",
                    "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
                  ].indexOf(this.relsTypes[target]) === -1
                ) {
                  continue;
                }

                if (filetypes.main.indexOf(contentType) !== -1 || contentType === filetypes.pptx[0]) {
                  this.textTarget || (this.textTarget = target);
                }

                fileTypeCandidates.push(key);
                this.targets.push(target);
              }
            }
          }
        }

        return fileTypeCandidates;
      },
    },
  ]);

  return Common;
})();
