"use strict";

const DocUtils = require("./docUtils");
const extensionRegex = /[^.]+\.([^.]+)/;

const rels = {
  /**
   * Gets the prefix for the file type
   * @param {string} fileType - The file type (either "docx" or "ppt")
   * @returns {string} The prefix for the file type
   */
  getPrefix(fileType) {
    return fileType === "docx" ? "word" : "ppt";
  },

  /**
   * Gets the file type name
   * @param {string} fileType - The file type (either "docx" or "ppt")
   * @returns {string} The file type name
   */
  getFileTypeName(fileType) {
    return fileType === "docx" ? "document" : "presentation";
  },

  /**
   * Gets the RELS file name
   * @param {string} fileName - The file name
   * @returns {string} The RELS file name
   */
  getRelsFileName(fileName) {
    const match = fileName.match(extensionRegex);
    return `${match[1]}.xml.rels`;
  },

  /**
   * Gets the RELS file path
   * @param {string} fileName - The file name
   * @param {string} fileType - The file type (either "docx" or "ppt")
   * @returns {string} The RELS file path
   */
  getRelsFilePath(fileName, fileType) {
    const prefix = fileType === "pptx" ? "ppt/slides" : "word";
    const relsFileName = this.getRelsFileName(fileName);
    return `${prefix}/_rels/${relsFileName}`;
  },
};

/**
 * ImgManager class
 */
class ImgManager {
  /**
   * Creates an instance of ImgManager
   * @param {Object} zip - The zip object
   * @param {string} fileName - The file name
   * @param {Object} xmlDocuments - The XML documents
   * @param {string} fileType - The file type (either "docx" or "ppt")
   */
  constructor(zip, fileName, xmlDocuments, fileType) {
    this.fileName = fileName;
    this.prefix = rels.getPrefix(fileType);
    this.zip = zip;
    this.xmlDocuments = xmlDocuments;
    this.fileTypeName = rels.getFileTypeName(fileType);
    this.mediaPrefix = fileType === "pptx" ? "../media" : "media";
    const relsFilePath = rels.getRelsFilePath(fileName, fileType);
    this.relsDoc = xmlDocuments[relsFilePath] || this.createEmptyRelsDoc(xmlDocuments, relsFilePath);
  }

  /**
   * Creates an empty RELS document
   * @param {Object} xmlDocuments - The XML documents
   * @param {string} relsFileName - The RELS file name
   * @returns {Document} The empty RELS document
   */
  createEmptyRelsDoc(xmlDocuments, relsFileName) {
    const mainRels = this.prefix + "/_rels/" + this.fileTypeName + ".xml.rels";
    const doc = xmlDocuments[mainRels];
    if (!doc) {
      const err = new Error("Could not copy from empty relsdoc");
      err.properties = {
        mainRels,
        relsFileName,
        files: Object.keys(this.zip.files),
      };
      throw err;
    }
    const relsDoc = DocUtils.str2xml(DocUtils.xml2str(doc));
    const relationships = relsDoc.getElementsByTagName("Relationships")[0];
    const relationshipChilds = relationships.getElementsByTagName("Relationship");
    for (let i = 0, l = relationshipChilds.length; i < l; i++) {
      relationships.removeChild(relationshipChilds[i]);
    }
    xmlDocuments[relsFileName] = relsDoc;
    return relsDoc;
  }

  /**
   * Loads the image RELS
   * @returns {number} The maximum RID
   */
  loadImageRels() {
    const iterable = this.relsDoc.getElementsByTagName("Relationship");
    return Array.prototype.reduce.call(iterable, (max, relationship) => {
      const id = relationship.getAttribute("Id");
      if (/^rId[0-9]+$/.test(id)) {
        return Math.max(max, parseInt(id.substr(3), 10));
      }
      return max;
    }, 0);
  }

  /**
   * Adds an extension RELS
   * @param {string} contentType - The content type
   * @param {string} extension - The file extension
   */
  addExtensionRels(contentType, extension) {
    const contentTypeDoc = this.xmlDocuments["[Content_Types].xml"];
    const defaultTags = contentTypeDoc.getElementsByTagName("Default");
    const extensionRegistered = Array.prototype.some.call(defaultTags, (tag) => tag.getAttribute("Extension") === extension);
    if (extensionRegistered) {
      return;
    }
    const types = contentTypeDoc.getElementsByTagName("Types")[0];
    const newTag = contentTypeDoc.createElement("Default");
    newTag.namespaceURI = null;
    newTag.setAttribute("ContentType", contentType);
    newTag.setAttribute("Extension", extension);
    types.appendChild(newTag);
  }

  /**
   * Adds an image and returns its RID
   * @param {string} contentType - The content type
   * @param {string} imageName - The image name
   * @param {string} imageData - The image data
   * @param {number} i - The index for the image name (default: 0)
   * @returns {number} The RID of the image
   */
  addImageRels(contentType, imageName, imageData, i = 0) {
    if (i === 0 && this.zip.files[`${this.prefix}/media/${imageName}`] != null) {
      return this.addImageRels(contentType, imageName, imageData, i + 1);
    }

    const realImageName = i === 0 ? imageName : `${imageName}(${i})`;
    const imagePath = `${this.prefix}/media/${realImageName}`;
    const image = {
      name: imagePath,
      data: imageData,
      options: {
        binary: true,
      },
    };

    try {
      this.zip.file(image.name, image.data, image.options);
    } catch (err) {
      const error = new Error(`Failed to add image to zip: ${err.message}`);
      error.properties = {
        imagePath,
        imageData,
        imageOptions: image.options,
      };
      throw error;
    }

    const extension = realImageName.replace(extensionRegex, "$1");
    this.addExtensionRels(contentType, extension);
    const relationships = this.relsDoc.getElementsByTagName("Relationships")[0];
    const newTag = this.relsDoc.createElement("Relationship");
    newTag.namespaceURI = null;
    const maxRid = this.loadImageRels() + 1;
    newTag.setAttribute("Id", `rId${maxRid}`);
    newTag.setAttribute("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image");
    newTag.setAttribute("Target", `${this.mediaPrefix}/${realImageName}`);
    relationships.appendChild(newTag);
    return maxRid;
  }
}

module.exports = ImgManager;
