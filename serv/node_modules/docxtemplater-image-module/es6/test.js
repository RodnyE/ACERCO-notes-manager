"use strict";
/* eslint-disable no-console */

const fs = require("fs-extra");
const path = require("path");
const Docxtemplater = require("docxtemplater");
const Pptxtemplater = require("pptx-templates");
const ImageModule = require("./index.js");
const sizeOf = require("image-size");
const chai = require("chai");
const chaiAsPromised = require("chai-as-promised");
const pify = require("pify");

const fileNames = [
	"imageExample.docx",
	"imageHeaderFooterExample.docx",
	"imageLoopExample.docx",
	"imageInlineExample.docx",
	"expectedInline.docx",
	"expectedNoImage.docx",
	"expectedHeaderFooter.docx",
	"expectedOneImage.docx",
	"expectedCentered.docx",
	"expectedLoopCentered.docx",
	"withoutRels.docx",
	"expectedWithoutRels.docx",
	"expectedBase64.docx",
	"tagImage.pptx",
	"expectedTagImage.pptx",
	"tagImageCentered.pptx",
	"expectedTagImageCentered.pptx",
	"expectedInlineResize.docx",
];

chai.use(chaiAsPromised);
const expect = chai.expect;

const loadFile = pify(fs.readFile);
const writeFile = pify(fs.writeFile);

const testStart = async function () {
	describe("{%image}", function () {
		it("should work with one image", async function () {
			const name = "imageExample.docx";
			const expectedName = "expectedOneImage.docx";
			const data = {image: "examples/image.png"};
			await loadAndRender(name, data, false, expectedName);
		});

		// ... other tests
	});
};

const loadAndRender = async function (name, data, centered, expectedName) {
	const file = testutils.createDoc(name);
	const doc = new Docxtemplater();
	const inputZip = new JSZip(file.loadedContent);
	doc.loadZip(inputZip).setData(data);
	const imageModule = new ImageModule({
		getImage: function (tagValue) {
			return loadFile(tagValue);
		},
		getSize: function () {
			return [150, 150];
		},
		centered: centered,
	});
	doc.attachModule(imageModule);
	const renderedDoc = doc.render();
	const expectedDoc = await loadFile(path.resolve("..", "examples", expectedName));
	expect(renderedDoc).to.deep.equal(expectedDoc);
};

testutils.setExamplesDirectory(path.resolve(__dirname, "..", "examples"));
testutils.setStartFunction(testStart);
fileNames.forEach(function (filename) {
	testutils.loadFile(filename, testutils.loadDocument);
});
testutils.start();

