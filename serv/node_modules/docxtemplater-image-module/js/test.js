"use strict";
/* eslint-disable no-console */

const fs = require("fs");
const path = require("path");
const Docxtemplater = require("docxtemplater");
const JSZip = require("jszip");
const ImageModule = require("./index.js");
const sizeOf = require("image-size");

const chai = require("chai");
const expect = chai.expect;
const mocha = require("mocha");

const fileNames = [
  "imageExample.docx",
  "imageHeaderFooterExample.docx",
  "imageLoopExample.docx",
  "imageInlineExample.docx",
  "expectedInline.docx",
  "expectedNoImage.docx",
  "expectedHeaderFooter.docx",
  "expectedOneImage.docx",
  "expectedCentered.docx",
  "expectedLoopCentered.docx",
  "withoutRels.docx",
  "expectedWithoutRels.docx",
  "expectedBase64.docx",
  "tagImage.pptx",
  "expectedTagImage.pptx",
  "tagImageCentered.pptx",
  "expectedTagImageCentered.pptx",
  "expectedInlineResize.docx",
];

describe("ImageModule", function () {
  describe("with Docxtemplater", function () {
    let doc;
    let inputZip;
    let imageModule;

    beforeEach(function () {
      doc = new Docxtemplater();
      inputZip = new JSZip();
      imageModule = new ImageModule({
        getImage: (tagValue) => {
          try {
            return fs.readFileSync(tagValue);
          } catch (error) {
            console.error(`Error reading file: ${tagValue}`, error);
            return Buffer.from("");
          }
        },
        getSize: () => [150, 150],
        centered: false,
      });
      doc.attachModule(imageModule);
    });

    describe("loading and rendering a document", function () {
      it("should work with one image", async function () {
        const file = testutils.createDoc(fileNames[0]);
        inputZip.file("word/document.xml", file.loadedContent, { base64: true });
        doc.loadZip(inputZip).setData({ image: "examples/image.png" });
        await doc.render();

        const expectedDoc = new Docxtemplater();
        const expectedFile = testutils.createDoc(fileNames[7]);
        inputZip = new JSZip(expectedFile.loadedContent);
        expectedDoc.loadZip(inputZip);
        const renderedDoc = doc.getZip().generate({ type: "nodebuffer" });

        expect(renderedDoc).to.deep.equal(expectedDoc.getZip().generate({ type: "nodebuffer" }));
      });

      // ... Add more test cases here
    });

    describe("loading and rendering a PPTX document", function () {
      it("should work with one image", async function () {
        const file = testutils.createDoc(fileNames[13]);
        inputZip.file("ppt/slides/slide1.xml", file.loadedContent, { base64: true });
        doc.loadZip(inputZip).setData({ image: "examples/image.png" });
        await doc.render();

        const expectedDoc = new Docxtemplater();
        const expectedFile = testutils.createDoc(fileNames[14]);
        inputZip = new JSZip(expectedFile.loadedContent);
        expectedDoc.loadZip(inputZip);
        const renderedDoc = doc.getZip().generate({ type: "nodebuffer" });

        expect(renderedDoc).to.deep.equal(expectedDoc.getZip().generate({ type: "nodebuffer" }));
      });

      // ... Add more test cases here
    });
  });
});

// ... Add other test cases here

mocha.run();
