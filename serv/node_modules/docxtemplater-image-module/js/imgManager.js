"use strict";

const { createClass } = require("./docUtils");
const fs = require("fs");
const path = require("path");

const extensionRegex = /[^.]+\.([^.]+)/;

const rels = {
  getPrefix: (fileType) => (fileType === "docx" ? "word" : "ppt"),
  getFileTypeName: (fileType) =>
    fileType === "docx" ? "document" : fileType === "pptx" ? "presentation" : "",
  getRelsFileName: (fileName) =>
    fileName.replace(/^.*?([a-zA-Z0-9]+)\.xml$/, "$1") + ".xml.rels",
  getRelsFilePath: (fileName, fileType) => {
    const prefix = fileType === "pptx" ? "ppt/slides" : "word";
    return prefix + "/_rels/" + rels.getRelsFileName(fileName);
  },
};

class ImgManager {
  constructor(zip, fileName, xmlDocuments, fileType = "docx") {
    if (!["docx", "pptx"].includes(fileType)) {
      throw new Error("Invalid file type. Supported file types are 'docx' and 'pptx'.");
    }

    this.fileName = fileName;
    this.prefix = rels.getPrefix(fileType);
    this.zip = zip;
    this.xmlDocuments = xmlDocuments;
    this.fileTypeName = rels.getFileTypeName(fileType);
    this.mediaPrefix = fileType === "pptx" ? "../media" : "media";
    this.relsFilePath = rels.getRelsFilePath(fileName, fileType);
    this.relsDoc = xmlDocuments[this.relsFilePath] || this.createEmptyRelsDoc();
  }

  createEmptyRelsDoc() {
    const mainRels = path.join(this.prefix, "_rels", this.fileTypeName + ".xml.rels");
    const doc = this.xmlDocuments[mainRels];

    if (!doc) {
      const err = new Error("Could not copy from empty relsdoc");
      err.properties = {
        mainRels,
        relsFileName: this.relsFilePath,
        files: Object.keys(this.zip.files),
      };
      throw err;
    }

    const relsDoc = fs.readFileSync(mainRels, "utf8");
    const relationships = relsDoc.match(/<Relationships[^>]*>([\s\S]*)<\/Relationships>/)[1];
    return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\n${relationships}\n</Relationships>`;
  }

  loadImageRels() {
    const iterable = this.relsDoc.getElementsByTagName("Relationship");
    let max = 0;

    for (let i = 0; i < iterable.length; i++) {
      const id = iterable[i].getAttribute("Id");
      if (/^rId[0-9]+$/.test(id)) {
        max = Math.max(max, parseInt(id.substr(3), 10));
      }
    }

    return max;
  }

  addExtensionRels(contentType, extension) {
    const contentTypeDoc = this.xmlDocuments["[Content_Types].xml"];
    const defaultTags = contentTypeDoc.getElementsByTagName("Default");
    const extensionRegistered = Array.prototype.some.call(defaultTags, (tag) => tag.getAttribute("Extension") === extension);

    if (extensionRegistered) {
      return;
    }

    const types = contentTypeDoc.getElementsByTagName("Types")[0];
    const newTag = contentTypeDoc.createElement("Default");
    newTag.namespaceURI = null;
    newTag.setAttribute("ContentType", contentType);
    newTag.setAttribute("Extension", extension);
    types.appendChild(newTag);
  }

  addImageRels(imageName, imageData, i = 0) {
    const realImageName = i === 0 ? imageName : imageName + `(${i})`;
    const imagePath = path.join(this.prefix, "media", realImageName);

    if (this.zip.files[imagePath]) {
      return this.addImageRels(imageName, imageData, i + 1);
    }

    const image = {
      name: imagePath,
      data: imageData,
      options: {
        binary: true,
      },
    };

    this.zip.file(image.name, image.data, image.options);
    const extension = path.extname(realImageName).slice(1);
    this.addExtensionRels("image/" + extension, extension);

    const relationships = this.relsDoc.getElementsByTagName("Relationships")[0];
    const newTag = this.relsDoc.createElement("Relationship");
    newTag.namespaceURI = null;
    const maxRid = this.loadImageRels() + 1;
    newTag.setAttribute("Id", `rId${maxRid}`);
    newTag.setAttribute("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image");
    newTag.setAttribute("Target", path.join(this.mediaPrefix, realImageName));
    relationships.appendChild(newTag);

    return maxRid;
  }
}

module.exports = ImgManager;
